{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projetos\\\\Sistema de agendamentos\\\\front\\\\src\\\\components\\\\ProgressCircleBar\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { fixDigits } from \"../../utils/formaters\";\nimport { Circle, CircleContainer, Container } from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressCircleBar = ({\n  backgroundStrokeColor,\n  className,\n  fontSize,\n  hasBgCircle,\n  progress,\n  size,\n  strokeColor,\n  strokeThickness,\n  title\n}) => {\n  _s();\n  const [totalLength, setTotalLength] = React.useState(0);\n  const circleRef = React.useRef(null);\n  const calculate = progress / 100 * totalLength;\n  const currentProgress = totalLength - calculate;\n  React.useEffect(() => {\n    if (circleRef.current) {\n      setTotalLength(Number(circleRef.current.getTotalLength().toFixed()));\n    }\n  }, [circleRef.current]);\n  const showDecimals = Math.abs(progress) < 1 ? 2 : 0;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    containerSize: size,\n    \"data-test-id\": \"circle-progress\",\n    className: className,\n    font: fontSize,\n    children: [/*#__PURE__*/_jsxDEV(CircleContainer, {\n      containerSize: size,\n      children: [/*#__PURE__*/_jsxDEV(Circle, {\n        bgCircle: backgroundStrokeColor ? backgroundStrokeColor : \"red\",\n        ref: circleRef,\n        cx: size,\n        cy: size,\n        r: size / 2,\n        strokeWidth: strokeThickness,\n        fill: \"transparent\",\n        length: totalLength,\n        percent: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), hasBgCircle && /*#__PURE__*/_jsxDEV(Circle, {\n        ref: circleRef,\n        cx: size,\n        cy: size,\n        r: size / 2,\n        strokeWidth: strokeThickness && strokeThickness * 2,\n        bgCircle: \"red\",\n        fill: \"transparent\",\n        length: totalLength,\n        percent: currentProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        ref: circleRef,\n        cx: size,\n        cy: size,\n        r: size / 2,\n        strokeWidth: strokeThickness,\n        bgCircle: strokeColor,\n        fill: \"transparent\",\n        length: totalLength,\n        percent: currentProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), title ? /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: [fixDigits(Math.abs(progress), showDecimals), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressCircleBar, \"ZhnEVsfs+M8Kucv74oWCxZtIBCU=\");\n_c = ProgressCircleBar;\nexport default ProgressCircleBar;\nvar _c;\n$RefreshReg$(_c, \"ProgressCircleBar\");","map":{"version":3,"names":["React","fixDigits","Circle","CircleContainer","Container","jsxDEV","_jsxDEV","ProgressCircleBar","backgroundStrokeColor","className","fontSize","hasBgCircle","progress","size","strokeColor","strokeThickness","title","_s","totalLength","setTotalLength","useState","circleRef","useRef","calculate","currentProgress","useEffect","current","Number","getTotalLength","toFixed","showDecimals","Math","abs","containerSize","font","children","bgCircle","ref","cx","cy","r","strokeWidth","fill","length","percent","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Projetos/Sistema de agendamentos/front/src/components/ProgressCircleBar/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { fixDigits } from \"../../utils/formaters\";\r\n\r\nimport { Circle, CircleContainer, Container } from \"./styles\";\r\n\r\ninterface ProgressCircleProps {\r\n  progress: number;\r\n  size: number;\r\n  backgroundStrokeColor?: string;\r\n  className?: string;\r\n  fontSize?: number;\r\n  hasBgCircle?: boolean;\r\n  strokeColor?: string;\r\n  strokeThickness?: number;\r\n  title?: string;\r\n  trackColor?: string;\r\n}\r\n\r\nconst ProgressCircleBar = ({\r\n  backgroundStrokeColor,\r\n  className,\r\n  fontSize,\r\n  hasBgCircle,\r\n  progress,\r\n  size,\r\n  strokeColor,\r\n  strokeThickness,\r\n  title,\r\n}: ProgressCircleProps) => {\r\n  const [totalLength, setTotalLength] = React.useState<number>(0);\r\n  const circleRef = React.useRef<SVGCircleElement>(null);\r\n  const calculate = (progress / 100) * totalLength;\r\n  const currentProgress = totalLength - calculate;\r\n\r\n  React.useEffect(() => {\r\n    if (circleRef.current) {\r\n      setTotalLength(Number(circleRef.current.getTotalLength().toFixed()));\r\n    }\r\n  }, [circleRef.current]);\r\n\r\n  const showDecimals = Math.abs(progress) < 1 ? 2 : 0;\r\n\r\n  return (\r\n    <Container\r\n      containerSize={size}\r\n      data-test-id=\"circle-progress\"\r\n      className={className}\r\n      font={fontSize}\r\n    >\r\n      <CircleContainer containerSize={size}>\r\n        <Circle\r\n          bgCircle={backgroundStrokeColor ? backgroundStrokeColor : \"red\"}\r\n          ref={circleRef}\r\n          cx={size}\r\n          cy={size}\r\n          r={size / 2}\r\n          strokeWidth={strokeThickness}\r\n          fill=\"transparent\"\r\n          length={totalLength}\r\n          percent={0}\r\n        />\r\n        {hasBgCircle && (\r\n          <Circle\r\n            ref={circleRef}\r\n            cx={size}\r\n            cy={size}\r\n            r={size / 2}\r\n            strokeWidth={strokeThickness && strokeThickness * 2}\r\n            bgCircle={\"red\"}\r\n            fill=\"transparent\"\r\n            length={totalLength}\r\n            percent={currentProgress}\r\n          />\r\n        )}\r\n        <Circle\r\n          ref={circleRef}\r\n          cx={size}\r\n          cy={size}\r\n          r={size / 2}\r\n          strokeWidth={strokeThickness}\r\n          bgCircle={strokeColor}\r\n          fill=\"transparent\"\r\n          length={totalLength}\r\n          percent={currentProgress}\r\n        />\r\n      </CircleContainer>\r\n      {title ? (\r\n        <strong>{title}</strong>\r\n      ) : (\r\n        <strong>{fixDigits(Math.abs(progress), showDecimals)}%</strong>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ProgressCircleBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}